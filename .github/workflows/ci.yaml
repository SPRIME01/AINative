name: Python CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'uv' # Enable caching for uv
        # cache-dependency-path will be auto-detected (e.g., backend/pyproject.toml or backend/uv.lock)

    - name: Install uv and dependencies
      run: |
        python -m pip install --upgrade pip uv # Install/upgrade pip, then install uv
        # Assuming your pyproject.toml is in the 'backend' directory
        # and your project can be installed editably with its dev dependencies.
        uv pip install -e ./backend[dev]
      # If using Poetry and want to switch to uv with Poetry's lock file:
      # run: |
      #   python -m pip install --upgrade pip uv
      #   uv pip sync backend/poetry.lock --no-deps # If poetry.lock is used
      #   uv pip install -e ./backend[dev] # Or just this if pyproject.toml is primary for uv

    - name: Lint with Ruff
      run: |
        # Ruff should be installed via backend[dev]
        ruff check backend/src backend/tests
        ruff format --check backend/src backend/tests
      # If using Poetry (and ruff is managed by poetry and installed by uv pip install above):
      # run: cd backend && poetry run ruff check src tests && poetry run ruff format --check src tests
      # Or, if ruff is directly available after uv pip install:
      # run: ruff check backend/src backend/tests && ruff format --check backend/src backend/tests

    - name: Type check with MyPy
      run: |
        # MyPy and type stubs should be installed via backend[dev]
        mypy backend/src --config-file backend/pyproject.toml
      # If using Poetry:
      # run: cd backend && poetry run mypy src --config-file pyproject.toml
      # Or, if mypy is directly available:
      # run: mypy backend/src --config-file backend/pyproject.toml

    - name: Test with pytest
      run: |
        # Pytest and plugins should be installed via backend[dev]
        pytest backend/tests --cov=ainative --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
      # If using Poetry:
      # run: cd backend && poetry run pytest tests --cov=ainative --cov-report=xml --cov-report=html --junitxml=pytest-report.xml
      # Or, if pytest is directly available:
      # run: pytest backend/tests --cov=ainative --cov-report=xml --cov-report=html --junitxml=pytest-report.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # Store your Codecov token in GitHub secrets
        files: ./backend/coverage.xml # Path to your coverage report
        # Optional: specify a directory for reports if not in root
        # working-directory: ./backend
        fail_ci_if_error: true
        verbose: true

    - name: Upload Pytest report
      uses: actions/upload-artifact@v4
      if: always() # Always run this step to upload test results
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: backend/pytest-report.xml

    - name: Upload Coverage HTML report
      uses: actions/upload-artifact@v4
      if: always() # Always run this step to upload coverage html
      with:
        name: coverage-html-${{ matrix.python-version }}
        path: backend/cov_html/
